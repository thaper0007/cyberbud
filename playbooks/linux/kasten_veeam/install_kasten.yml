---
- name: Install K3s (if needed), Helm, then deploy Veeam Kasten K10
  hosts: k3s_master
  become: yes
  become_user: root

  vars:
    install_k3s_channel: "stable"                  # or "v1.33"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"   # root-owned kubeconfig created by k3s
    kasten_cluster_name: "k8s-cluster"

  pre_tasks:
    - name: Wait for apt/dpkg locks to be released (up to ~2 minutes)
      shell: |
        ! fuser /var/lib/dpkg/lock-frontend /var/lib/apt/lists/lock >/dev/null 2>&1
      register: apt_locks_free
      retries: 24
      delay: 5
      until: apt_locks_free.rc == 0
      changed_when: false

    - name: Ensure base tools present
      apt:
        name:
          - curl
          - tar
          - ca-certificates
        state: present
        update_cache: yes

    # ---------- K3s install if missing ----------
    - name: Check if k3s service exists
      shell: systemctl list-unit-files | grep -E '^k3s\.service'
      register: k3s_service
      failed_when: false
      changed_when: false

    - name: Install K3s server (if missing)
      shell: |
        set -e
        curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL={{ install_k3s_channel }} sh -s -
      when: k3s_service.rc != 0

    - name: Ensure k3s service is active
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Wait for kubeconfig to appear
      stat:
        path: "{{ kubeconfig_path }}"
      register: kcfg_stat
      retries: 30
      delay: 3
      until: kcfg_stat.stat.exists
      changed_when: false

    - name: Wait for Kubernetes API to be reachable
      command: kubectl cluster-info
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cluster_info
      retries: 30
      delay: 5
      until: cluster_info.rc == 0

    # ---------- Helm install if missing ----------
    - name: Check if helm is already installed
      command: bash -lc "command -v helm"
      register: helm_check
      ignore_errors: true
      changed_when: false

    - name: Install Helm (if missing)
      shell: |
        set -e
        curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        executable: /bin/bash
      when: helm_check.rc != 0

    - name: Verify helm version
      command: helm version
      register: helm_ver
      changed_when: false

  tasks:
    - name: Add Kasten Helm repo
      command: helm repo add kasten https://charts.kasten.io/
      register: repo_result
      changed_when: >
        'has been added' in (repo_result.stdout + repo_result.stderr) or
        'already exists' in (repo_result.stdout + repo_result.stderr)

    - name: Update Helm repos
      command: helm repo update

    - name: Install or upgrade Kasten K10
      command: >
        helm upgrade --install k10 kasten/k10
        --namespace kasten-io --create-namespace
        --set global.clusterName="{{ kasten_cluster_name }}"
        --set global.persistence.storageClass=longhorn
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Expose K10 gateway via LoadBalancer
      command: >
        kubectl -n kasten-io patch svc gateway
        -p '{"spec":{"type":"LoadBalancer"}}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Show K10 gateway service (EXTERNAL-IP)
      command: kubectl -n kasten-io get svc gateway -o wide
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: svc_output

    - debug:
        var: svc_output.stdout_lines
